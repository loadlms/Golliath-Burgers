// Script final para verificar se as corre√ß√µes das imagens foram aplicadas em produ√ß√£o

const API_BASE_URL = 'https://golliath-burgers.vercel.app/api';

// Fun√ß√£o para verificar URLs das imagens em produ√ß√£o
async function verificarImagensProd() {
    try {
        console.log('üîç Verificando URLs das imagens em produ√ß√£o...');
        console.log('üåê Endpoint:', `${API_BASE_URL}/cardapio`);
        
        const response = await fetch(`${API_BASE_URL}/cardapio`, {
            headers: {
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
            }
        });
        
        console.log('üì° Status da resposta:', response.status);
        
        if (!response.ok) {
            console.log('‚ùå Erro na requisi√ß√£o:', response.statusText);
            const errorText = await response.text();
            console.log('üìÑ Resposta de erro:', errorText.substring(0, 200));
            return;
        }
        
        const data = await response.json();
        const itens = data.cardapio || data;
        
        if (!Array.isArray(itens)) {
            console.log('‚ùå Dados recebidos n√£o s√£o um array:', typeof itens);
            console.log('üìÑ Dados:', JSON.stringify(data, null, 2).substring(0, 500));
            return;
        }
        
        console.log(`\nüìä Total de itens encontrados: ${itens.length}`);
        console.log('\nüìã An√°lise das URLs das imagens:');
        
        let urlsCorretas = 0;
        let urlsIncorretas = 0;
        let urlsProblematicas = [];
        
        itens.forEach(item => {
            const isImageKitUrl = item.imagem && item.imagem.startsWith('https://ik.imagekit.io/');
            const status = isImageKitUrl ? '‚úÖ' : '‚ùå';
            
            console.log(`${status} ID ${item.id}: ${item.nome}`);
            console.log(`   URL: ${item.imagem || 'NENHUMA'}`);
            
            if (isImageKitUrl) {
                urlsCorretas++;
            } else {
                urlsIncorretas++;
                urlsProblematicas.push({
                    id: item.id,
                    nome: item.nome,
                    url: item.imagem
                });
            }
        });
        
        console.log(`\nüìà RESUMO FINAL:`);
        console.log(`‚úÖ URLs corretas (ImageKit): ${urlsCorretas}`);
        console.log(`‚ùå URLs incorretas: ${urlsIncorretas}`);
        
        if (urlsIncorretas === 0) {
            console.log('\nüéâ SUCESSO! Todas as URLs est√£o corretas!');
            console.log('üåê As imagens devem aparecer corretamente no site!');
            console.log('\nüîß PROBLEMAS RESOLVIDOS:');
            console.log('   ‚úÖ URLs relativas convertidas para absolutas');
            console.log('   ‚úÖ URLs do ImageKit configuradas corretamente');
            console.log('   ‚úÖ Banco de dados atualizado em produ√ß√£o');
        } else {
            console.log('\n‚ö†Ô∏è  AINDA H√Å PROBLEMAS:');
            console.log(`   ${urlsIncorretas} URLs ainda precisam ser corrigidas`);
            
            console.log('\nüîç URLs problem√°ticas:');
            urlsProblematicas.forEach(item => {
                console.log(`   - ID ${item.id}: ${item.nome}`);
                console.log(`     URL: ${item.url}`);
            });
            
            console.log('\nüí° PR√ìXIMOS PASSOS:');
            console.log('   1. Verificar se as corre√ß√µes foram aplicadas no Supabase');
            console.log('   2. Verificar se h√° cache no servidor');
            console.log('   3. Aplicar corre√ß√µes manualmente se necess√°rio');
        }
        
        // Testar acesso a uma imagem espec√≠fica
        if (urlsCorretas > 0) {
            const itemComImagemCorreta = itens.find(item => 
                item.imagem && item.imagem.startsWith('https://ik.imagekit.io/')
            );
            
            if (itemComImagemCorreta) {
                console.log('\nüß™ Testando acesso a uma imagem correta...');
                try {
                    const imageResponse = await fetch(itemComImagemCorreta.imagem, {
                        method: 'HEAD'
                    });
                    
                    if (imageResponse.ok) {
                        console.log('‚úÖ Imagem acess√≠vel:', itemComImagemCorreta.imagem);
                    } else {
                        console.log('‚ùå Imagem n√£o acess√≠vel:', imageResponse.status);
                    }
                } catch (error) {
                    console.log('‚ùå Erro ao acessar imagem:', error.message);
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erro durante verifica√ß√£o:', error.message);
        console.error('üîç Stack trace:', error.stack);
    }
}

// Fun√ß√£o para verificar se o site est√° funcionando
async function verificarSitePrincipal() {
    try {
        console.log('\nüåê Verificando site principal...');
        
        const response = await fetch('https://golliath-burgers.vercel.app/', {
            method: 'HEAD'
        });
        
        if (response.ok) {
            console.log('‚úÖ Site principal est√° online');
        } else {
            console.log('‚ùå Site principal com problemas:', response.status);
        }
        
    } catch (error) {
        console.log('‚ùå Erro ao verificar site principal:', error.message);
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üöÄ VERIFICA√á√ÉO FINAL - CORRE√á√ÉO DAS IMAGENS EM PRODU√á√ÉO');
    console.log('=' .repeat(60));
    
    await verificarSitePrincipal();
    await verificarImagensProd();
    
    console.log('\n' + '='.repeat(60));
    console.log('‚úÖ Verifica√ß√£o conclu√≠da!');
}

// Executar verifica√ß√£o
main();